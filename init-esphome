#!/bin/bash

# init-esphome command that builds an ESPHome development environment

# Copyright © 2025 Green.Bug-Eyed.Monster

# License:

# Permission is hereby granted to any person obtaining a copy of this software 
# and associated documentation files (the "Software"), to use, copy, and distribute 
# the Software solely for its intended purpose, subject to the following conditions:
#
#  1. The Software may not be used for the purpose of reverse engineering, decompiling, 
#     disassembling, or otherwise attempting to discover or replicate its underlying 
#     structure, algorithms, or implementation details.
#
#  2. The Software may not be used, in whole or in part, as the basis for developing 
#     any competing or derivative works.
#
#  3. This license does not grant permission to modify, sublicense, or create 
#     derivative works of the Software beyond its intended use.
#
#  4. The above copyright notice and this permission notice shall be included in 
#     all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Exit on any error
set -e

# Get the target folder from the first argument
TARGET_DIR="$1"

# Check if the user provided a folder
if [ -z "$TARGET_DIR" ]; then
  echo "Usage: $0 <target-folder>"
  exit 1
fi

# Create the folder if it doesn't exist
mkdir -p "$TARGET_DIR"

# Change into the folder
cd "$TARGET_DIR"

echo "Initialising ESPHome environment in: $TARGET_DIR"

# Clean-up to allow re-initialisation of a previously populated directory.
for file in boiler-plate.yaml secrets-form.yaml documents/README.md; do
    if [ -f "$file" ]; then
        rm -f "$file"
    fi
done

# Create subfolders
mkdir -p documents icons hardware common PlatformIO

# Set up Python virtual environment
python3 -m venv venv
source venv/bin/activate

# Install ESPHome and dependencies
pip3 install esphome
pip install tornado esptool

deactivate


# Overwrite .gitignore

cat > .gitignore <<'EOF'
#
# Gitignore settings for init-esphome
# 
/.esphome/
/venv/
/secrets.yaml
EOF

echo ".gitignore overwritten."


# Prompt for Git init
read -p "Do you want to initialise a Git repository in '$TARGET_DIR'? (y/n): " answer
if [[ "$answer" =~ ^[Yy]$ ]]; then
  git init
  echo "Git repository initialised."
else
  [ -d .git ] && mv .git .git_backup
  echo "Git repository de-initialised."
fi


# Create Visual Studio Code configuration folder

mkdir -p .vscode

# Write task configuration to tasks.json

cat > .vscode/tasks.json <<'EOF'
{ //
  // Copyright © 2025 Green.Bug-Eyed.Monster
  //
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Run ESPHome Configuration",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "if [[ \"${file}\" != *.yaml ]]; then echo \"Error: Configuration .yaml file must be open and focused in the editor.\" >&2; exit 1; fi && source ./venv/bin/activate && echo '2' | esphome run \"${file}\" && deactivate"
      ],
      "problemMatcher": []
    },
    {
      "label": "Bootstrap ESPHome Configuration",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "if [[ \"${file}\" != *.yaml ]]; then echo \"Error: Configuration .yaml file must be open and focused in the editor.\" >&2; exit 1; fi && source ./venv/bin/activate && echo '1' | esphome run ${file} && deactivate"
      ],
      "problemMatcher": []
    },
    {
      "label": "Generate Project Source",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "if [[ \"${file}\" != *.yaml ]]; then echo \"Error: Configuration .yaml file must be open and focused in the editor.\" >&2; exit 1; fi && source ./venv/bin/activate && esphome compile --only-generate ${file} && deactivate"
      ],
      "problemMatcher": []
    },

    {
      "label": "Validate ESPHome Configuration",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "if [[ \"${file}\" != *.yaml ]]; then echo \"Error: Configuration .yaml file must be open and focused in the editor.\" >&2; exit 1; fi && source ./venv/bin/activate && mkdir -p .esphome/build/${fileBasenameNoExtension} && esphome config ${file} | tee .esphome/build/${fileBasenameNoExtension}/${fileBasenameNoExtension}.validated.yaml && code .esphome/build/${fileBasenameNoExtension}/${fileBasenameNoExtension}.validated.yaml && deactivate"      ],
      "problemMatcher": []
    },

    {
      "label": "Build Configuration Binary",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "if [[ \"${file}\" != *.yaml ]]; then echo \"Error: Configuration .yaml file must be open and focused in the editor.\" >&2; exit 1; fi && source ./venv/bin/activate && esphome compile ${file} && deactivate"
      ],
      "problemMatcher": []
    },
    {
      "label": "Upload Configuration Binary",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "if [[ \"${file}\" != *.yaml ]]; then echo \"Error: Configuration .yaml file must be open and focused in the editor.\" >&2; exit 1; fi && source ./venv/bin/activate && esphome compile ${file} && esphome upload ${file} && deactivate"
      ],
      "problemMatcher": []
    },
    {
      "label": "Clean Configuration Build",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "if [[ \"${file}\" != *.yaml ]]; then echo \"Error: Configuration .yaml file must be open and focused in the editor.\" >&2; exit 1; fi && source ./venv/bin/activate && esphome clean ${file} && deactivate"
      ],
      "problemMatcher": []
    },
    {
      "label": "Open PlatformIO Snapshot",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "if [[ \"${file}\" != *.yaml ]]; then echo \"Error: Configuration .yaml file must be open and focused in the editor.\" >&2; exit 1; fi && DEST=./PlatformIO/${fileBasenameNoExtension}; if [ -d \"$DEST\" ]; then echo \"Error: Destination folder '$DEST' already exists.\" >&2; exit 1; else source ./venv/bin/activate && esphome compile --only-generate ${file} && deactivate && cp -r .esphome/build/${fileBasenameNoExtension} \"$DEST\" && cp ${file} \"$DEST/${fileBasename}.bak\" && code \"$DEST\"; fi"
      ],
      "problemMatcher": []
    },
    {
      "label": "Bring-up ESPHome Device Builder Dashboard",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "(xdg-open http://127.0.0.1:6052 &) && source ./venv/bin/activate && esphome dashboard . && deactivate"
      ],
      "problemMatcher": []
    },
    {
      "label": "Cleanup MQTT Topics",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "if [[ \"${file}\" != *.yaml ]]; then echo \"Error: Configuration .yaml file must be open and focused in the editor.\" >&2; exit 1; fi && source ./venv/bin/activate && esphome clean-mqtt ${file} && deactivate"
      ],
      "problemMatcher": []
    },
    {
      "label": "Upgrade ESPHome Version",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "source ./venv/bin/activate && pip install --upgrade esphome && deactivate"
      ],
      "problemMatcher": []
    },
    {
      "label": "ESPHome Wizard",
      "type": "shell",
      "command": ".vscode/run_esphome_wizard.sh",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "Open README File",
      "type": "shell",
      "command": "code",
      "args": ["documents/README.md"],  // or your markdown file path
      "problemMatcher": [],
      "runOptions": {
        "runOn": "folderOpen"
      }
    }
  ]
}
EOF

echo ".vscode/tasks.json written."

    
# Write task button configuration to settings.json

cat > .vscode/settings.json <<'EOF'
{ //
  // Copyright © 2025 Green.Bug-Eyed.Monster
  //
  "VsCodeTaskButtons.showCounter": true,
  "VsCodeTaskButtons.tasks": [
    {
      "label": "$(check) Validate",
      "task": "Validate ESPHome Configuration",
      "tooltip": "Validates the focused YAML configuration file.",
    },
    {
      "label": "$(plug) Bootstrap",
      "task": "Bootstrap ESPHome Configuration",
      "tooltip": "Compile and initial flashing over USB/serial.",
    },
    {
      "label": "$(broadcast) Run",
      "task": "Run ESPHome Configuration",
      "tooltip": "Compile and upload using Over-the-Air (OTA) update.",
    },
    {
      "label": "$(default-view-icon) Dashboard",
      "task": "Bring-up ESPHome Device Builder Dashboard",
      "tooltip": "Launch ESPHome Dashboard web server.",
    },
    {
      "label": "$(menu) ESPHome",
      "tasks": [
        {
          "label": "$(mortar-board) README",
          "task": "Open README File",
          "tooltip": "Open the README.md markdown file"
        },
        {
          "label": "$(pencil) Wizard",
          "task": "ESPHome Wizard",
          "tooltip": "Launches an interactive wizard to help you create a new device configuration file from scratch."
        },

        {
          "label": "$(plug) Bootstrap",
          "task": "Bootstrap ESPHome Configuration",
          "tooltip": "This button is used for the compiling and **initial flashing** of a device over a direct USB/serial connection. It also displays the device's logs via USB/serial."
        },

        {
          "label": "$(broadcast) Run",
          "task": "Run ESPHome Configuration",
          "tooltip": "This button compiles and uploads the configuration to a device that is already on the network, using an **Over-the-Air (OTA)** update. It also displays the device's logs via wifi."
        },
        {
          "label": "$(default-view-icon) Dashboard",
          "task": "Bring-up ESPHome Device Builder Dashboard",
          "tooltip": "Launch ESPHome Dashboard web server.",
        },
        {
          "label": "$(wrench) Build",
          "task": "Build Configuration Binary",
          "tooltip": "Compiles your YAML configuration into a binary firmware file (`.bin`) without uploading it. This is useful for checking for compilation errors or for manual flashing with other tools. The binary is stored in the `.esphome/build/<node-name>/` directory."
        },
        {
          "label": "$(arrow-up) Upload",
          "task": "Upload Configuration Binary",
          "tooltip": "Uploads a previously compiled firmware binary to your device. If the binary doesn't exist or is stale, it will compile it first."
        },
        {
          "label": "$(trash) Clean",
          "task": "Clean Configuration Build",
          "tooltip": "Removes all the temporary build files and the compiled firmware binary for the currently focused YAML configuration. This is useful for forcing a complete re-compilation from scratch."
        },
        {
          "label": "$(notebook-clear) Clean-Up MQTT",
          "task": "Cleanup MQTT Topics",
          "tooltip": "Removes retained MQTT discovery messages from your MQTT broker for the device specified in the focused YAML file. This helps clean up old or orphaned device entries in Home Assistant."
        },
        {
          "label": "$(device-camera) Platformio Snapshot",
          "task": "Open PlatformIO Snapshot",
          "tooltip": "Generates a complete, standalone PlatformIO C++ project from your YAML file. This is for advanced users who want to modify the underlying C++ code. The new project is copied to the `PlatformIO/` directory in your workspace and opened in a new VS Code window. It prevents overwriting by checking if a project with the same name already exists."
        },
        {
          "label": "$(search-refresh) Upgrade ESPHome",
          "task": "Upgrade ESPHome Version",
          "tooltip": "Upgrades the `esphome` package within the project's virtual environment to the latest version available from PyPI."
        },

      ],
    },
  ],
  
  "markdown.preview.openMarkdownLinks": "inPreview",
  "workbench.editorAssociations": {
    "*.md": "vscode.markdown.preview.editor",
  }
}
EOF

echo ".vscode/settings.json written."



# Write shell script to settings.json

cat > .vscode/run_esphome_wizard.sh <<'EOF'
#!/usr/bin/env bash

# Copyright © 2025 Green.Bug-Eyed.Monster

# There are inadequacies in the way task initiated environments inherit inputs.

# Flush any existing stdin to prevent accidental input
while read -t 0.1 -r discard; do :; done

# Clear the screen
clear

# Prompt user for filename safely, from actual terminal
read -p "Enter the YAML filename to create (e.g., example.yaml): " configFile < /dev/tty

# Check extension
if [[ "$configFile" != *.yaml && "$configFile" != *.yml ]]; then
  echo "Error: Filename must end in .yaml or .yml"
  exit 1
fi

# Activate venv and run
source ./venv/bin/activate
esphome wizard "$configFile"
code "$configFile"
EOF

chmod +x .vscode/run_esphome_wizard.sh

echo ".vscode/run_esphome_wizard.sh written."



# Write to boiler-plate.yaml

cat > boiler-plate.yaml <<'EOF'
# ===================================================================
# ESPHome Boilerplate Configuration
#
# This file serves as a starting template for new ESPHome projects.
# It includes common configurations needed for most devices.
#
# How to use this file:
# 1. Copy this file to a new name (e.g., my-node.yaml).
# 2. Update the 'substitutions' section with your device-specific details.
# 3. Fill in your credentials in a 'secrets.yaml' and save it in the root 
#    project folder (a secrets.form.yaml is provided as a template).
# 4. Comment-out components for which you do not have passwords or keys,
#    in the file common/testing-config.yaml.
# 5. Add your device's specific components (sensors, switches, etc.) at the end.
# ===================================================================

substitutions:
  # --- Device-specific variables ---
  # These values are used to easily configure the device without changing the main configuration.
  # They are referenced elsewhere in this file using '$variable_name'.

  # A unique name for your device. Used for the Wi-Fi hostname (e.g., 'boiler-plate.local'),
  # the ESPHome API identifier, and by default, the entity IDs in Home Assistant.
  # Should be lowercase and contain only a-z, 0-9, and hyphens.
  device_name: boiler-plate

  # A human-readable name for the device. This is what you'll see in the Home Assistant UI.
  device_friendly_name: "Boilerplate App"

  # This section specifies the microcontroller architectural platform.
  # Replace '<your_platform>' with your board's architecture, 
  # e.g., esp32, esp8266, bk72xx, ln882x, rtl87xx, rp2040, etc.
  platform: <your_platform>

  # The board you are using. This tells ESPHome how to compile the firmware.
  # Replace '<your_device_board>' with your actual board, e.g., 'nodemcuv2', 'd1_mini', 'esp32dev'.
  # A list of supported boards can be found at: https://esphome.io/components/esp8266.html or https://esphome.io/components/esp32.html
  device_board: <your_device_board>


# ===================================================================
# Reusable Configuration with Packages
#
# This section demonstrates how to include common configuration settings
# from another file. This is the recommended way to keep your device-
# specific files clean and to reuse code across multiple devices.
# ===================================================================

# --- Why `packages` is used instead of a simple `<<: !include` ---
# The standard YAML merge `<<: !include ...` is a simple text inclusion.
# It fails if both this file and the included file define the same
# top-level key (like 'api:' or 'logger:').
#
# The `packages` feature is ESPHome's powerful solution. It intelligently
# merges configurations. For example, if this file defines an `api:` service
# and the included file also defines an `api:` block, `packages` will combine
# them correctly instead of causing an error.
packages:
  # This line includes all the base configuration (Wi-Fi, API, OTA, logger, etc.)
  # from the 'testing-config.yaml' file located in the 'common/' directory.
  base: !include common/testing-config.yaml


# ===================================================================
# Add your device-specific components below this line.
# For example: sensor, switch, light, etc.
#
# Example sensor:
# sensor:
#   - platform: dht
#     pin: D2
#     model: DHT22
#     temperature:
#       name: "Living Room Temperature"
#     humidity:
#       name: "Living Room Humidity"
#     update_interval: 60s
#
# ===================================================================

EOF

chmod a-w boiler-plate.yaml    # Make file read-only

echo "boiler-plate.yaml written."



# Write to secrets-form.yaml

cat > secrets-form.yaml <<'EOF'
# ===================================================================
# ESPHome Secrets Template
#
# This file is a template for your 'secrets.yaml' file. It allows you
# to store sensitive information (like passwords and keys) separately
# from your main configuration files.
#
# How to use this file:
# 1. Make a copy of this file and rename it to 'secrets.yaml'.
#    It should be in the same directory as your ESPHome YAML files.
# 2. Replace the placeholder values (e.g., "<wifi_network_name>") with your
#    actual credentials and settings.
# 3. **IMPORTANT**: Do NOT commit your 'secrets.yaml' file to public
#    version control systems like GitHub. Add 'secrets.yaml' to your
#    .gitignore file to prevent accidentally sharing your credentials.
#
# The '!secret' tag in your main YAML files (e.g., boiler-plate.yaml)
# tells ESPHome to look for the corresponding key in this file.
# ===================================================================

# --- Wi-Fi Network Credentials ---
# The SSID (name) of your Wi-Fi network.
wifi_ssid: "<wifi_network_name>"
# The password for your Wi-Fi network.
wifi_password: "<wifi_password>"

# --- Fallback Hotspot (Captive Portal) ---
# If the device cannot connect to your Wi-Fi, it will create a temporary
# Access Point (AP). This is the password for that AP.
# It must be at least 8 characters long.
fallback_hotspot_password: "<simple_hotspot_password>"

# --- Over-The-Air (OTA) Update Password ---
# A password to secure wireless firmware updates.
# This is HIGHLY RECOMMENDED to prevent unauthorized access to your device.
# Choose a strong, unique password.
ota_password: "<a_strong_ota_password>"

# --- Native Home Assistant API (Optional but Recommended) ---
# An encryption key for secure communication with the Home Assistant API.
# This adds a significant layer of security.
# You can generate a key using the command: openssl rand -base64 32
# To use this, uncomment the 'encryption' section in your device's YAML file.
api_encryption_key: "<paste_your_generated_api_key_here>"

# --- MQTT Broker Connection Details (Optional) ---
# These are only needed if you are using the MQTT component.
# The hostname or IP address of your MQTT broker (e.g., "192.168.1.100" or "homeassistant.local").
mqtt_broker: "<mqtt_broker_hostname>"
# The username for your MQTT broker.
mqtt_username: "<mqtt_broker_username>"
# The password for your MQTT broker.
mqtt_password: "<mqtt_broker_password>"

EOF

chmod a-w secrets-form.yaml    # Make file read-only

echo "secrets-form.yaml written."



# Write to common/testing-config.yaml

cat > common/testing-config.yaml <<'EOF'

# ===================================================================
# Core ESPHome Configuration
# ===================================================================
esphome:
  # The 'name' is the network hostname and the base for entity IDs.
  name: $device_name
  # The 'friendly_name' is for display purposes in Home Assistant.
  friendly_name: $device_friendly_name
  # You can also add comments to your device configuration in Home Assistant.
  # comment: "This is a boilerplate ESPHome device."

# ===================================================================
# Hardware Platform Configuration
# ===================================================================
# This section specifies the microcontroller platform and board.
# Supported platforms include: esp32, esp8266, rp2040, bk72xx, etc.
$platform:
  board: $device_board

# ===================================================================
# Logging Configuration
# ===================================================================
# The logger component prints log messages from the device.
# Useful for debugging. You can view logs via USB or the web server.
logger:
  # Log level can be set to DEBUG, INFO, WARN, ERROR, or VERBOSE.
  # level: DEBUG
  # To disable logging over the serial port (UART), set baud_rate to 0.
  # This can be necessary if you need to use the UART pins for other components.
  # baud_rate: 0

# ===================================================================
# Native API for Home Assistant
# ===================================================================
# The API component enables direct, efficient communication with Home Assistant.
# It's the recommended way to integrate ESPHome with Home Assistant.
api:
  # For enhanced security, you can encrypt the API communication.
  # The key should be a base64-encoded 32-byte key.
  # You can generate one with: openssl rand -base64 32
  # Store the key in your 'secrets.yaml' file.
  # encryption:
  #   key: !secret api_encryption_key

# ===================================================================
# Over-The-Air (OTA) Updates
# ===================================================================
# OTA allows you to update the device's firmware wirelessly.
ota:
  - platform: esphome
    # A password is highly recommended to secure OTA updates.
    # Store it in your 'secrets.yaml' file.
    password: !secret ota_password

# ===================================================================
# Wi-Fi Configuration
# ===================================================================
wifi:
  # Your Wi-Fi network credentials.
  # It's best practice to store these in a 'secrets.yaml' file.
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # --- Fallback Access Point (AP) ---
  # If the device can't connect to the configured Wi-Fi, it will create its own
  # Wi-Fi network (Access Point) that you can connect to for troubleshooting.
  ap:
    ssid: "$device_name Hotspot"
    password: !secret fallback_hotspot_password

# ===================================================================
# Captive Portal
# ===================================================================
# When the fallback AP is active, the captive portal provides a simple web
# page to manually configure Wi-Fi credentials.
captive_portal:

# ===================================================================
# Web Server
# ===================================================================
# The web_server component starts a web server on the device.
# You can access it via http://<device_name>.local to view logs,
# restart the device, and interact with its components.
web_server:
  # You can set a port (default is 80).
  # port: 80
  # You can also secure it with a username and password.
  # username: "admin"
  # password: "your_password"

# ===================================================================
# MQTT (Message Queuing Telemetry Transport)
# ===================================================================
# MQTT is a lightweight messaging protocol for IoT devices.
# It can be used as an alternative or in addition to the native API.
# It's useful for integrating with systems other than Home Assistant.
mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  # You can customize the topic prefix for MQTT messages.
  # topic_prefix: "esphome/$device_name"
EOF

echo "common/testing-config.yaml written."


# Write to common/secrets.yaml

cat > common/secrets.yaml <<'EOF'
# ===================================================================
# ESPHome Common Secrets Proxy
#
# This file serves a crucial role in making secrets available to
# reusable configuration files located within this 'common/' directory,
# such as 'test-setup.yaml'.
#
# --- How It Works & Why It's Important ---
# When ESPHome processes a YAML file (like one included via `packages:`),
# it looks for a 'secrets.yaml' file in the *same directory*.
#
# This file, being named 'secrets.yaml' and placed inside 'common/',
# acts as a proxy or a bridge.
#
# The `<<: !include ../secrets.yaml` line uses two features:
#  - `!include ../secrets.yaml`: This directive tells ESPHome to load the
#    contents of the main secrets file from the parent directory.
#  - `<<:`: This is a YAML "merge key". It merges all the key-value pairs
#    from the included file into this one.
#
# The result is that any configuration within the 'common/' directory can
# now use `!secret` tags and access the credentials defined in the
# single, root `/secrets.yaml` file. This promotes a clean, secure,
# and centralized secret management strategy, avoiding duplication.
# ===================================================================
<<: !include ../secrets.yaml
EOF

echo "common/secrets.yaml written."



# Write to .vscode/extensions.json

cat > .vscode/extensions.json <<'EOF'
// VS Code allows comments in *.json files using a relaxed JSON format called JSON with Comments (jsonc).
// Were this file processed with a strict JSON parser it would fail, yet VS Code's jsonc parser allows the comments.
{
  "recommendations": [
    "platformio.platformio-ide",   // PlatformIO - Your Gateway to Embedded Software Development Excellence.
    "esphome.esphome-vscode",      // ESPHome - Continuous validation of ESPHome configuration files.
                                   //         - Key tootltips for description and documentation links.
    "spencerwmiles.vscode-task-buttons",
                                   // Task Buttons - Add your tasks as buttons in the status bar.
  ],
  "unwantedRecommendations": [
    // Optional: block certain extensions from being recommended
    "somepublisher.bad-extension"
  ]
}
EOF

echo ".vscode/extensions.json written."



# Write to documents/README.md

cat > documents/README.md <<'EOF'

# The init-esphome VS Code Task Buttons README

<!-- Copyright © 2025 Green.Bug-Eyed.Monster -->

This document describes the function of each custom task button available in the Visual Studio Code status bar for this init-esphome generated ESPHome project. These buttons provide convenient shortcuts for common development tasks.

**Note:** Most of these tasks require you to have the relevant ESPHome configuration file (e.g., `<node-name.yaml>`) open and focused in the editor.

---

### `Validate`

**Task:** `Validate ESPHome Configuration`

This button validates the currently focused YAML configuration file.

**Sequence of Actions:**
1.  Checks that the currently active file in the editor has a `.yaml` extension.
2.  Activates the project's Python virtual environment (`./venv`).
3.  Creates a build directory for the configuration file inside `.esphome/build/` called `<node-name>`.
4.  Runs the `esphome config` command on your file. This command validates the syntax and expands all substitutions and packages.
5.  The fully-expanded configuration is saved to a new file named `<node-name.validated.yaml>` inside the build directory.
6.  The new `<node-name.validated.yaml>` file is automatically opened in VS Code for your review.
7.  Deactivates the virtual environment.

---

### `Bootstrap`

**Task:** `Bootstrap ESPHome Configuration`

This button is used for the compiling and **initial flashing** of a device over a direct USB/serial connection. It also displays the device's logs via USB/serial.

**Sequence of Actions:**
1.  Checks that the active file is a `.yaml` file.
2.  Activates the virtual environment.
3.  Executes `esphome run <node-name.yaml>`, automatically selecting the **first** upload option presented (which is typically the USB/serial port).
4.  This compiles the firmware, connects to the device via serial, and uploads the firmware.
5.  After a successful upload, it connects to the device by USB/serial port to stream its logs to the VS Code terminal.
6.  Deactivates the virtual environment.

---

### `Run`

**Task:** `Run ESPHome Configuration`

This button compiles and uploads the configuration to a device that is already on the network, using an **Over-the-Air (OTA)** update. It also displays the device's logs via wifi.

**Sequence of Actions:**
1.  Checks that the active file is a `.yaml` file.
2.  Activates the virtual environment.
3.  Executes `esphome run <node-name.yaml>`, automatically selecting the **second** upload option presented (which is typically OTA).
4.  This compiles the firmware and uploads it wirelessly to the device.
5.  After a successful upload, it connects to the device wirelessly to stream its logs to the VS Code terminal.
6.  Deactivates the virtual environment when the process is stopped.

---

### `Dashboard`

**Task:** `Bring-up ESPHome Device Builder Dashboard`

This button launches the ESPHome web server dashboard for managing your project files through a browser interface.

**Sequence of Actions:**
1.  Opens `http://127.0.0.1:6052` in your system's default web browser.
2.  Activates the virtual environment.
3.  Starts the ESPHome dashboard, serving the configuration files from the current project directory (`.`).
4.  The dashboard process runs in the terminal until you stop it (e.g., with `Ctrl+C`).
5.  Deactivates the virtual environment upon exit.

---

### Additional Buttons via `ESPHome` (Dropdown Menu)

This is a dropdown menu containing a collection of other useful ESPHome commands.

#### `Wizard`
**Task:** `ESPHome Wizard`

Launches an interactive wizard to help you create a new device configuration file from scratch.

**Sequence of Actions:**
1.  Runs a helper script (`.vscode/run_esphome_wizard.sh`).
2.  The script prompts you in the terminal to enter a filename for the new configuration.
3.  It then runs the `esphome wizard` command, which asks you a series of questions about your device (name, platform, Wi-Fi, etc.).
4.  Once the wizard is complete, the new YAML file is created and automatically opened in VS Code.

#### `Build`
**Task:** `Build Configuration Binary`

Compiles your YAML configuration into a binary firmware file (`.bin`) without uploading it. This is useful for checking for compilation errors or for manual flashing with other tools. The binary is stored in the `.esphome/build/<node-name>/` directory.

**Sequence of Actions:**
1.  Checks that the active file is a `.yaml` file.
2.  Activates the project's Python virtual environment (`./venv`).
3.  Runs `esphome compile <node-name.yaml>`.
4.  Deactivates the virtual environment.

#### `Upload`
**Task:** `Upload Configuration Binary`

Uploads a previously compiled firmware binary to your device. If the binary doesn't exist or is stale, it will compile it first.

**Sequence of Actions:**
1.  Checks that the active file is a `.yaml` file.
2.  Activates the project's Python virtual environment (`./venv`).
3.  Runs `esphome compile <node-name.yaml>`.
4.  Runs `esphome upload <node-name.yaml>`.
5.  Deactivates the virtual environment.

#### `Clean`
**Task:** `Clean Configuration Build`

Removes all the temporary build files and the compiled firmware binary for the currently focused YAML configuration. This is useful for forcing a complete re-compilation from scratch.

**Sequence of Actions:**
1.  Checks that the active file is a `.yaml` file.
2.  Activates the virtual environment.
3.  Runs `esphome clean <node-name.yaml>`.
4.  Deactivates the virtual environment.

#### `Clean-Up MQTT`
**Task:** `Cleanup MQTT Topics`

Removes retained MQTT discovery messages from your MQTT broker for the device specified in the focused YAML file. This helps clean up old or orphaned device entries in Home Assistant.

**Sequence of Actions:**
1.  Checks that the active file is a `.yaml` file.
2.  Activates the virtual environment.
3.  Runs `esphome clean-mqtt <node-name.yaml>`.
4.  Deactivates the virtual environment.

#### `Platformio Snapshot`
**Task:** `Open PlatformIO Snapshot`

Generates a complete, standalone PlatformIO C++ project from your YAML file. This is for advanced users who want to modify the underlying C++ code. The new project is copied to the `PlatformIO/` directory in your workspace and opened in a new VS Code window. It prevents overwriting by checking if a project with the same name already exists.

**Sequence of Actions:**
1.  Checks that the active file is a `.yaml` file and that the destination `PlatformIO/<node-name>` folder doesn't already exist.
2.  Activates the project's Python virtual environment (`./venv`).
3.  Runs `esphome compile --only-generate` on the YAML file, which creates the C++ source code and PlatformIO project structure inside the `.esphome/build/<node-name>/` directory.
4.  Deactivates the virtual environment.
5.  Copies the entire generated project from the build directory to `PlatformIO/<node-name>/`.
6.  Copies the original YAML configuration file into the new project directory as a backup (`<node-name.bak>`).
7.  Opens the newly created project folder (`PlatformIO/<node-name>/`) in a new VS Code window.

#### `Upgrade ESPHome`
**Task:** `Upgrade ESPHome Version`

Upgrades the `esphome` package within the project's virtual environment to the latest version available from PyPI.

**Sequence of Actions:**
1.  Activates the project's Python virtual environment (`./venv`).
2.  Executes `pip install --upgrade esphome`.
3.  Deactivates the virtual environment.
<br><br>
---
Please visit [Green Bug-Eyed Monster](https://green.bug-eyed.monster/) 👽
<br><small>Copyright © 2025 Green.Bug-Eyed.Monster</small>

EOF

chmod a-w documents/README.md    # Make file read-only

echo "documents/README.md written."




# Open project folder in Visual Studio Code

code . boiler-plate.yaml secrets-form.yaml common/testing-config.yaml
